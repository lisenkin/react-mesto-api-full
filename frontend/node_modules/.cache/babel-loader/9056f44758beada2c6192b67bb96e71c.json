{"ast":null,"code":"//export const BASE_URL = 'https://api.mesto.lisena.nomoredomains.monster';\n//export const BASE_URL = 'http://localhost:3000';\nexport var BASE_URL=\"\".concat(window.location.protocol).concat(process.env.REACT_APP_API_URL||'//localhost:3001');export var checkResponse=function checkResponse(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));};export var register=function register(email,password){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',credentials:'include',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(checkResponse);};export var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',credentials:'include',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(checkResponse);};export var checkToken=function checkToken(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',credentials:'include',headers:{'Accept':'application/json','Content-Type':'application/json'}}).then(checkResponse);};","map":{"version":3,"sources":["/home/lisena/react-mesto-api-full/frontend/src/utils/auth.js"],"names":["BASE_URL","window","location","protocol","process","env","REACT_APP_API_URL","checkResponse","res","ok","json","Promise","reject","status","register","email","password","fetch","method","credentials","headers","body","JSON","stringify","then","authorize","checkToken","token"],"mappings":"AAAA;AACA;AACA,MAAO,IAAMA,CAAAA,QAAQ,WAAMC,MAAM,CAACC,QAAP,CAAgBC,QAAtB,SAAiCC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,EAAiC,kBAAlE,CAAd,CACP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,GAAD,CAAS,CACpC,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,EAAP,CACD,CALM,CAOP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAOC,CAAAA,KAAK,WAAIjB,QAAJ,YAAuB,CAC/BkB,MAAM,CAAE,MADuB,CAE/BC,WAAW,CAAE,SAFkB,CAG/BC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAHsB,CAO/BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACR,KAAK,CAALA,KAAD,CAAQC,QAAQ,CAARA,QAAR,CAAf,CAPyB,CAAvB,CAAL,CASJQ,IATI,CASCjB,aATD,CAAP,CAUC,CAXI,CAcP,MAAO,IAAMkB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACV,KAAD,CAAQC,QAAR,CAAqB,CAC1C,MAAOC,CAAAA,KAAK,WAAIjB,QAAJ,YAAuB,CAC/BkB,MAAM,CAAE,MADuB,CAE/BC,WAAW,CAAE,SAFkB,CAG/BC,OAAO,CAAE,CACT,SAAU,kBADD,CAET,eAAgB,kBAFP,CAHsB,CAO/BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAACR,KAAK,CAALA,KAAD,CAAQC,QAAQ,CAARA,QAAR,CAAf,CAPyB,CAAvB,CAAL,CASNQ,IATM,CASDjB,aATC,CAAP,CAUH,CAXM,CAaP,MAAO,IAAMmB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACrC,MAAOV,CAAAA,KAAK,WAAIjB,QAAJ,cAAyB,CACjCkB,MAAM,CAAE,KADyB,CAEjCC,WAAW,CAAE,SAFoB,CAGjCC,OAAO,CAAE,CACT,SAAU,kBADD,CAET,eAAgB,kBAFP,CAHwB,CAAzB,CAAL,CAQJI,IARI,CAQCjB,aARD,CAAP,CASC,CAVM","sourcesContent":["//export const BASE_URL = 'https://api.mesto.lisena.nomoredomains.monster';\n//export const BASE_URL = 'http://localhost:3000';\nexport const BASE_URL = `${window.location.protocol}${process.env.REACT_APP_API_URL || '//localhost:3001'}`\nexport const checkResponse = (res) => {\n  if (res.ok) {\n      return res.json();\n  }\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({email, password})\n    })\n    .then(checkResponse)\n  };\n\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({email, password})\n    })\n    .then(checkResponse)\n};\n\nexport const checkToken = (token) => {\nreturn fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    }\n})\n  .then(checkResponse)\n}\n"]},"metadata":{},"sourceType":"module"}