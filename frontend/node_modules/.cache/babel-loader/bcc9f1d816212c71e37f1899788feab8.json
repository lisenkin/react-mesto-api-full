{"ast":null,"code":"import _classCallCheck from\"/home/lisena/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/lisena/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";//import { get } from \"mongoose\";\n// хоть тут не надо все переписывать *ну почти\nvar Api=/*#__PURE__*/function(){function Api(_ref){var baseUrl=_ref.baseUrl;_classCallCheck(this,Api);this._baseUrl=baseUrl;}// приватный метод для ошибки что б не было дублирования :)\n_createClass(Api,[{key:\"_checkResponse\",value:function _checkResponse(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}// метод загрузки карточек с сервера\n},{key:\"getInitialCards\",value:function getInitialCards(){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{method:'GET',credentials:'include',headers:{'Content-Type':'application/json'}}).then(this._checkResponse);}//загрузка юзеринфо\n},{key:\"getUserInfo\",value:function getUserInfo(){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:'GET',credentials:'include',headers:{'Content-Type':'application/json'}}).then(this._checkResponse);}//изменение юзеринфо передаем name и job(about)\n},{key:\"setUserInfo\",value:function setUserInfo(data){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:'PATCH',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:\"\".concat(data.name),about:\"\".concat(data.about)})}).then(this._checkResponse);}//добавить карточку  data (name link)  POST\n},{key:\"setCard\",value:function setCard(data){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:\"\".concat(data.name),link:\"\".concat(data.link)})}).then(this._checkResponse);}},{key:\"removeCard\",value:function removeCard(cardId){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(cardId),{method:'DELETE',credentials:'include',headers:{'Content-Type':'application/json'}}).then(this._checkResponse);}},{key:\"changeLikeCardStatus\",value:function changeLikeCardStatus(cardId,isLiked){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(cardId,\"/likes\"),{method:isLiked?'DELETE':'PUT',credentials:'include',headers:{'Content-Type':'application/json'}}).then(this._checkResponse);}},{key:\"editUserAvatar\",value:function editUserAvatar(data){return fetch(\"\".concat(this._baseUrl,\"/users/me/avatar\"),{method:'PATCH',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({avatar:\"\".concat(data.avatar)})}).then(this._checkResponse);}}]);return Api;}();var baseUrl=\"\".concat(window.location.protocol).concat(process.env.REACT_APP_API_URL||'//localhost:3001');var config={// baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-24',\n// token: '1c58ab56-f6d5-4a78-b0cd-4b039a0e7da3'\n//groupId: 'cohort-24'\n//baseUrl: 'https://api.mesto.lisena.nomoredomains.monster',\n//baseUrl: 'http://localhost:3000',\ncredentials:'include',headers:{'Content-Type':'application/json'}};var api=new Api(config);export default api;","map":{"version":3,"sources":["/home/lisena/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","baseUrl","_baseUrl","res","ok","json","Promise","reject","status","fetch","method","credentials","headers","then","_checkResponse","data","body","JSON","stringify","name","about","link","cardId","isLiked","avatar","window","location","protocol","process","env","REACT_APP_API_URL","config","api"],"mappings":"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","sourcesContent":["//import { get } from \"mongoose\";\n\n// хоть тут не надо все переписывать *ну почти\nclass Api {\n\n  constructor({ baseUrl }) {\n    this._baseUrl = baseUrl;\n  }\n\n// приватный метод для ошибки что б не было дублирования :)\n   _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // метод загрузки карточек с сервера\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this._checkResponse)\n  }\n  //загрузка юзеринфо\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this._checkResponse)\n  }\n  //изменение юзеринфо передаем name и job(about)\n  setUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: `${data.name}`,\n        about: `${data.about}`,\n      })\n    })\n    .then(this._checkResponse)\n  }\n  //добавить карточку  data (name link)  POST\n  setCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n     name: `${data.name}`,\n      link: `${data.link}`,\n\n      })\n    })\n    .then(this._checkResponse)\n  }\n\n  removeCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n    })\n    .then(this._checkResponse)\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: isLiked ? 'DELETE' : 'PUT',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(this._checkResponse)\n  }\n  editUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: {\n\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: `${data.avatar}`\n      })\n    })\n    .then(this._checkResponse)\n  }\n}\nconst baseUrl = `${window.location.protocol}${process.env.REACT_APP_API_URL || '//localhost:3001'}`\nconst config = {\n // baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-24',\n // token: '1c58ab56-f6d5-4a78-b0cd-4b039a0e7da3'\n  //groupId: 'cohort-24'\n  //baseUrl: 'https://api.mesto.lisena.nomoredomains.monster',\n  //baseUrl: 'http://localhost:3000',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n}\n\nconst api = new Api(config);\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}